<?php

/**
 * Implements hook_menu()
 * @return array 
 */
function commerce_interkassa_menu() {
    $items['commerce_interkassa/status'] = array(
        'title' => 'Status',
        'page callback' => '_commerce_interkassa_status',
        'access arguments' => array('access content'),
        'file' => 'commerce_interkassa.inc',
        'type' => MENU_CALLBACK,
    );
    $items['commerce_interkassa/success'] = array(
        'title' => 'Successful payment',
        'page callback' => '_commerce_interkassa_success',
        'access arguments' => array('access content'),
        'file' => 'commerce_interkassa.inc',
        'type' => MENU_CALLBACK,
    );
    $items['commerce_interkassa/fail'] = array(
        'title' => 'Unsuccessful payment',
        'page callback' => '_commerce_interkassa_fail',
        'access arguments' => array('access content'),
        'file' => 'commerce_interkassa.inc',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Payment method callback: settings form.
 */
function commerce_interkassa_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
        'account' => array('test'),
        'commerce_interkassa_shop_id' => '',
        'commerce_interkassa_secret_id' => '',
        //'commerce_interkassa_payment_meth' => '',
        'commerce_interkassa_user_fail' => '',
        'commerce_interkassa_user_success' => '',
        'commerce_interkassa_mode' => '',
        'commerce_interkassa_checkout_button' => '',
    );

    $form['commerce_interkassa_shop_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Shop ID'),
        '#default_value' => $settings['commerce_interkassa_shop_id'],
        '#description' => t('Shop ID in Interkassa system'),
        '#required' => TRUE,
    );
    $form['commerce_interkassa_secret_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Interkassa secret ID'),
        '#default_value' => $settings['commerce_interkassa_secret_id'],
        '#description' => t('The secret ID for Interkassa system - MD5 hash.'),
        '#required' => TRUE,
    );
    /*
      $form['commerce_interkassa_payment_meth'] = array(
      '#type' => 'textfield',
      '#title' => t('Payment method'),
      '#default_value' => $settings['commerce_interkassa_payment_meth'],
      '#description' => t('You can set a payment method which will be used by Interkassa to process payment. If left blank a user will be taken to the list of payment methods.')
      );
     */
    $form['commerce_interkassa_user_fail'] = array(
        '#type' => 'textfield',
        '#title' => t('Failure message'),
        '#default_value' => $settings['commerce_interkassa_user_fail'],
        '#description' => t('This message will be displayed if payment failed.')
    );
    $form['commerce_interkassa_user_success'] = array(
        '#type' => 'textfield',
        '#title' => t('Successful message'),
        '#default_value' => $settings['commerce_interkassa_user_success'],
        '#description' => t('This message will be displayed if payment was successful.')
    );
    $form['commerce_interkassa_mode'] = array(
        '#type' => 'select',
        '#title' => t('Transaction mode'),
        '#description' => t('Transaction mode used for processing orders.'),
        '#options' => array(
            'production' => t('Live'),
            'test' => t('Test'),
        ),
        '#default_value' => $settings['commerce_interkassa_mode'],
    );
    $form['commerce_interkassa_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Order review submit button text'),
        '#description' => t('Provide Interkassa specific text for the submit button on the order review page.'),
        '#defaulst_value' => $settings['commerce_interkassa_checkout_button'],
    );

    return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_interkassa_commerce_payment_method_info() {
    $payment_methods = array();

    $path = drupal_get_path('module', 'commerce_interkassa') . '/images/interkassa_logo.gif';
    $icon = '<img src="/' . $path . '" alt="' . t('Interkassa') . '" title="' . t('Interkassa') . '" class="commerce-interkassa-logo" />';
    $display_title = t('Interkassa <br/>!logo', array('!logo' => $icon));

    $payment_methods['commerce_interkassa'] = array(
        'title' => t('Interkassa'),
        'short_title' => t('Interkassa'),
        'display_title' => $display_title,
        'description' => t('Interkassa Payment'),
        'active' => TRUE,
        'offsite' => TRUE,
        //'offsite_autoredirect' => TRUE,
        'offsite_autoredirect' => FALSE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_interkassa_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    if (empty($payment_method['settings']['commerce_interkassa_shop_id']) ||
        empty($payment_method['settings']['commerce_interkassa_secret_id'])) {
        drupal_set_message(t('Interkassa is not configured for use.'), 'error');
    }   
    $form = array();

    // Need to create a dummy value to solve http://drupal.org/node/1230666
    // Probably an issue in the main commerce module
    $form['dummy'] = array(
        '#type' => 'hidden',
        '#value' => 'dummy'
    );
    return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_interkassa_redirect_form($form, &$form_state, $order, $payment_method) {
    global $base_url;

    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $amount = $wrapper->commerce_order_total->amount->value();
    $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

    // Build the data array that will be translated into hidden form values.
    $data = array(
        'ik_shop_id' => $payment_method['settings']['commerce_interkassa_shop_id'],
        'ik_payment_amount' => $amount,
        'ik_payment_id' => $order->order_id,
        'ik_payment_desc' => 'description',
        'ik_success_url' => $base_url . '/commerce_interkassa/success',
        'ik_success_method' => 'post',
        'ik_fail_url' => $base_url . '/commerce_interkassa/fail',
        'ik_fail_method' => 'post',
        'ik_status_url' => $base_url . '/commerce_interkassa/status',
        'ik_status_method' => 'post',
        'ik_payment_desc' => '',
    );


    $form['#action'] = 'https://interkassa.com/lib/payment.php';

    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed to Interkassa'),
    );

    return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_interkassa_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
    // Throw an error if a long enough name was not provided.
    //if (strlen($pane_values['name']) < 2) {
    //form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));
    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    //return FALSE;
    //}
}

/**
 * Payment method callback: submit form submission.
 */ /*
  function commerce_interkassa_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_interkassa'] = $pane_values;

  commerce_interkassa_transaction($payment_method, $order, $charge);
  }
 */

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_interkassa_transaction($payment_method, $order, $charge) {
    /*
      $transaction = commerce_payment_transaction_new('commerce_interkassa', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = 'Name: @name';
      //$transaction->message_variables = array('@name' => $name);
      dpm($transaction);
      commerce_payment_transaction_save($transaction);

     */
}

