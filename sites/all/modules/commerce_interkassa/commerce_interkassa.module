<?php

function commerce_interkassa_menu() {
    $items['commerce_interkassa/test'] = array(
        'title' => 'Test form Interkassa',
        'page callback' => 'commerce_interkassa_test',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * Payment method callback: settings form.
 */
function commerce_interkassa_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
        'pos_id' => 0,
        'pos_auth_key' => '',
        'md5' => '',
        'md5_2' => '',
        'payback' => 0,
    );


    $form['pos_id'] = array(
        '#title' => t('POS id'),
        '#type' => 'textfield',
        '#default_value' => $settings['pos_id'],
        '#description' => t('Assigned by PayU'),
        '#required' => TRUE,
    );

    return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_interkassa_commerce_payment_method_info() {
    $payment_methods = array();

    $payment_methods['commerce_interkassa'] = array(
        'title' => t('Interkassa'),
        'short_title' => t('Interkassa'),
        'display_title' => t('Interkassa'),
        'description' => t('Interkassa Payment'),
        'active' => TRUE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_interkassa_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form = array();

    $text = theme('image', array('path' => drupal_get_path('module', 'commerce_interkassa') . '/images/interkassa_logo.gif', 'alt' => t('Interkassa'), 'title' => t('Interkassa'), 'attributes' => array('class' => 'interkassa-logo')));
    $form['logo'] = array('#markup' => $text);

    // Need to create a dummy value to solve http://drupal.org/node/1230666
    // Probably an issue in the main commerce module
    $form['dummy'] = array(
        '#type' => 'hidden',
        '#value' => 'dummy'
    );
    return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_interkassa_redirect_form($form, &$form_state, $order, $payment_method) {

    // Build the data array that will be translated into hidden form values.
    $data = array(
        'ik_shop_id' => 'C6C00382-2752-9476-9CED-3C766EA2BD1',
        'ik_payment_amount' => '0.10',
        'ik_payment_id' => 'id1',
        'ik_payment_desc' => 'description',
    );

    $form['#action'] = 'https://interkassa.com/lib/payment.php';

    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed to Interkassa'),
    );

    return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_interkassa_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
    // Throw an error if a long enough name was not provided.
    //if (strlen($pane_values['name']) < 2) {
    //form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));
    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    //return FALSE;
    //}
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_interkassa_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
    $order->data['commerce_interkassa'] = $pane_values;

    commerce_interkassa_transaction($payment_method, $order, $charge);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_interkassa_transaction($payment_method, $order, $charge) {
    $transaction = commerce_payment_transaction_new('commerce_interkassa', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = 'Name: @name';
    //$transaction->message_variables = array('@name' => $name);
    dpm($transaction);
    commerce_payment_transaction_save($transaction);
}

